// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: server.proto

package orunner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OCluster_Health_FullMethodName         = "/ocluster.OCluster/Health"
	OCluster_ChatCompletion_FullMethodName = "/ocluster.OCluster/ChatCompletion"
	OCluster_FileUploader_FullMethodName   = "/ocluster.OCluster/FileUploader"
)

// OClusterClient is the client API for OCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OClusterClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	ChatCompletion(ctx context.Context, in *LLMMessage, opts ...grpc.CallOption) (*LLMMessage, error)
	FileUploader(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileChunkRequest, FileChunkResponse], error)
}

type oClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewOClusterClient(cc grpc.ClientConnInterface) OClusterClient {
	return &oClusterClient{cc}
}

func (c *oClusterClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, OCluster_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oClusterClient) ChatCompletion(ctx context.Context, in *LLMMessage, opts ...grpc.CallOption) (*LLMMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMMessage)
	err := c.cc.Invoke(ctx, OCluster_ChatCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oClusterClient) FileUploader(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileChunkRequest, FileChunkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OCluster_ServiceDesc.Streams[0], OCluster_FileUploader_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunkRequest, FileChunkResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OCluster_FileUploaderClient = grpc.BidiStreamingClient[FileChunkRequest, FileChunkResponse]

// OClusterServer is the server API for OCluster service.
// All implementations must embed UnimplementedOClusterServer
// for forward compatibility.
type OClusterServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	ChatCompletion(context.Context, *LLMMessage) (*LLMMessage, error)
	FileUploader(grpc.BidiStreamingServer[FileChunkRequest, FileChunkResponse]) error
	mustEmbedUnimplementedOClusterServer()
}

// UnimplementedOClusterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOClusterServer struct{}

func (UnimplementedOClusterServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedOClusterServer) ChatCompletion(context.Context, *LLMMessage) (*LLMMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedOClusterServer) FileUploader(grpc.BidiStreamingServer[FileChunkRequest, FileChunkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FileUploader not implemented")
}
func (UnimplementedOClusterServer) mustEmbedUnimplementedOClusterServer() {}
func (UnimplementedOClusterServer) testEmbeddedByValue()                  {}

// UnsafeOClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OClusterServer will
// result in compilation errors.
type UnsafeOClusterServer interface {
	mustEmbedUnimplementedOClusterServer()
}

func RegisterOClusterServer(s grpc.ServiceRegistrar, srv OClusterServer) {
	// If the following call pancis, it indicates UnimplementedOClusterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OCluster_ServiceDesc, srv)
}

func _OCluster_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OClusterServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCluster_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OClusterServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCluster_ChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OClusterServer).ChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCluster_ChatCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OClusterServer).ChatCompletion(ctx, req.(*LLMMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCluster_FileUploader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OClusterServer).FileUploader(&grpc.GenericServerStream[FileChunkRequest, FileChunkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OCluster_FileUploaderServer = grpc.BidiStreamingServer[FileChunkRequest, FileChunkResponse]

// OCluster_ServiceDesc is the grpc.ServiceDesc for OCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocluster.OCluster",
	HandlerType: (*OClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _OCluster_Health_Handler,
		},
		{
			MethodName: "ChatCompletion",
			Handler:    _OCluster_ChatCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUploader",
			Handler:       _OCluster_FileUploader_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
